#!/bin/bash
# The logic to start up your application should be put in this
# script. The application will work only if it binds to
# $OPENSHIFT_INTERNAL_IP:8080

VENV_VERSION=`md5sum ${OPENSHIFT_REPO_DIR}requirements.txt | cut -d ' ' -f1`
VENV_BASE_DIR="${OPENSHIFT_DATA_DIR}virtualenvs/"
VENV_APP_DIR="${VENV_BASE_DIR}${VENV_VERSION}"

source ${VENV_APP_DIR}/bin/activate
export DJANGO_SETTINGS_MODULE="config.settings.openshift"

# gunicorn config

# GUNICORN_BIN="python3.5 ${OPENSHIFT_REPO_DIR}food_step/manage.py run_gunicorn"
# WORKERS=3
# LOGFILE=${OPENSHIFT_DIY_LOG_DIR}gunicorn_out.log
# ACCESS_LOGFILE=${OPENSHIFT_DIY_LOG_DIR}gunicorn_access.log
# PIDFILE=${OPENSHIFT_DATA_DIR}gunicorn.pid
LOGFILE=${OPENSHIFT_DIY_LOG_DIR}uwsgi_out.log
ACCESS_LOGFILE=${OPENSHIFT_DIY_LOG_DIR}uwsgi_access.log
PIDFILE=${OPENSHIFT_DATA_DIR}uwsgi.pid

# # Execute gunicorn daemon

# $GUNICORN_BIN $OPENSHIFT_DIY_IP:$OPENSHIFT_DIY_PORT \
#     --daemon \
#     --workers=$WORKERS \
#     --pid=$PIDFILE \
#     --log-file=$LOGFILE \
#     --access-logfile $ACCESS_LOGFILE \
#     --log-level=info
# WORKERS=3
# LOGFILE=${OPENSHIFT_DIY_LOG_DIR}gunicorn_out.log
# ACCESS_LOGFILE=${OPENSHIFT_DIY_LOG_DIR}gunicorn_access.log
# PIDFILE=${OPENSHIFT_DATA_DIR}gunicorn.pid
# CHDIR=${OPENSHIFT_REPO_DIR}food_step

# gunicorn \
#     --env DJANGO_SETTINGS_MODULE=config.settings.openshift \
#     wsgi:application \
#     --chdir $CHDIR \
#     -w $WORKERS \
#     -b $OPENSHIFT_DIY_IP:$OPENSHIFT_DIY_PORT \
#     -p $PIDFILE \
#     --log-level info \
#     --access-logfile $ACCESS_LOGFILE \
#     --log-file $LOGFILE

uwsgi --chdir=$CHDIR \
    --module=config.wsgi:application \
    --env DJANGO_SETTINGS_MODULE=config.settings.openshift \
    --master --pidfile=$PIDFILE \
    --socket=$OPENSHIFT_DIY_IP:$OPENSHIFT_DIY_PORT \      # can also be a file --processes=5 \                 # number of worker processes --uid=1000 --gid=2000 \         # if root, uwsgi can drop privileges --harakiri=20 \                 # respawn processes taking more than 20 seconds --max-requests=5000 \           # respawn processes after serving 5000 requests --vacuum \                      # clear environment on exit --home=/path/to/virtual/env \   # optional path to a virtualenv
    --daemonize=$LOGFILE      # background the process